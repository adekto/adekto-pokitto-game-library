#include "Pokitto.h"

Pokitto::Core game;

// TODO adekto: will put this in a header file soon
const uint8_t background[][66] = {
 {
     16,14,
    0,0,0,0,0,0,0,0,0,32,0,0,0,128,0,0,
0,0,0,0,0,0,0,0,0,0,32,0,0,0,8,0,
0,0,0,0,2,0,0,0,8,0,0,0,0,0,2,0,
0,0,0,128,0,0,0,0,0,0,0,0,0,0,0,0,
 },
  {
     16,14,
     51,51,51,48,204,204,204,192,51,51,51,48,204,204,204,192,
51,51,51,48,204,204,204,192,51,51,51,48,204,204,204,192,
51,51,51,48,204,204,204,192,51,51,51,48,204,204,204,192,
51,51,51,48,204,204,204,192,0,0,0,0,0,0,0,0,
 },
  {
     16,14,
     255,255,252,240,255,255,252,240,255,255,252,240,0,0,3,0,
255,207,255,240,255,207,255,240,255,207,255,240,0,48,3,0,
255,255,252,240,255,255,252,240,255,255,252,240,0,192,3,0,
255,63,255,240,255,63,255,240,0,0,0,0,0,0,0,0,
 },
};

const uint8_t sprites[][66] = {
 {
     16,14,

0,0,0,0,10,170,170,0,42,170,170,128,42,170,170,128,
10,170,170,128,42,170,170,128,42,170,170,128,42,170,168,128,
42,170,168,128,42,170,170,128,42,170,170,128,10,170,170,128,
42,170,170,128,42,170,170,128,0,0,0,0,0,0,0,0,
 },
  {
     16,14,
  63,255,255,240,48,0,0,48,48,0,0,48,48,0,12,240,
48,0,3,48,48,12,204,240,48,3,3,48,48,12,204,240,
60,195,3,48,51,12,204,240,60,195,3,48,51,12,204,240,
60,195,3,48,63,255,255,240,0,0,0,0,0,0,0,0,
 },
  {
     16,14,
     0,0,0,0,207,0,0,0,51,0,0,0,204,60,192,0,
51,51,0,0,204,12,204,240,243,51,3,48,0,12,204,192,
255,51,195,48,255,0,12,192,255,255,207,48,255,255,192,0,
255,255,255,240,255,255,255,240,0,0,0,0,0,0,0,0,
 },
  {    16,14,
    0,0,0,0,16,4,0,0,16,4,0,0,16,17,80,0,
16,85,84,0,16,85,85,0,17,69,81,64,85,1,64,64,
16,5,80,64,0,21,80,0,0,80,80,0,0,64,16,0,
0,64,20,0,0,64,4,0,0,0,0,0,0,0,0,0,
 },
 {     16,14,
    16,0,0,0,68,0,64,0,68,0,64,0,16,1,20,0,
16,5,85,0,4,21,85,64,5,85,84,80,5,80,0,16,
1,1,20,0,1,1,21,0,0,65,85,0,0,65,85,64,
0,17,85,64,0,17,0,16,0,0,0,0,0,0,0,0,
 },
  {     16,14,
    0,0,0,0,1,85,85,0,5,85,84,64,5,85,80,64,
4,64,17,0,5,85,80,0,4,16,16,0,5,85,80,0,
4,0,80,0,5,85,81,0,4,5,80,64,5,85,84,64,
1,85,85,0,0,0,0,0,0,0,0,0,0,0,0,0,
 },
   {     16,14,
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
2,160,0,0,8,8,0,0,8,0,0,0,32,0,0,0,
34,170,0,0,42,170,168,0,10,170,170,0,10,170,170,128,
10,2,32,0,8,136,8,0,0,0,0,0,0,0,0,0,
 },
    {     16,14,
0,0,2,128,0,0,8,32,0,0,2,32,0,0,0,32,
0,42,128,32,2,130,0,128,0,42,128,128,2,128,2,0,
8,168,130,0,8,168,40,0,0,170,8,0,0,130,32,0,
2,2,32,0,8,2,128,0,0,0,0,0,0,0,0,0,
 },
     {     16,14,
0,0,0,0,0,0,2,0,0,0,0,128,0,0,0,128,
0,10,160,128,0,160,128,128,8,10,160,128,42,32,0,128,
34,42,34,0,34,42,10,128,42,42,130,0,8,32,128,0,
0,128,32,0,2,0,32,0,0,0,0,0,0,0,0,0,
 },
};

uint8_t dungeon[20][20]={
    {1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1},
    {1,2,2,2,2, 2,2,2,2,2, 1,2,2,2,2, 2,2,2,2,1},
    {1,0,0,0,0, 0,0,0,0,0, 1,0,0,0,0, 0,0,0,0,1},
    {1,0,0,0,0, 0,0,0,0,0, 1,0,0,0,0, 0,0,0,0,1},
    {1,0,0,0,0, 0,0,0,0,0, 1,1,1,0,1, 1,1,1,1,1},
    {1,0,0,0,0, 0,0,0,0,0, 1,2,2,0,2, 2,2,2,2,1},
    {1,0,0,0,0, 0,0,0,0,0, 1,0,0,0,0, 0,0,0,0,1},
    {1,1,1,1,1, 0,1,1,1,1, 1,0,0,0,0, 0,0,0,0,1},
    {1,2,2,2,2, 0,2,2,2,2, 1,0,0,0,0, 0,0,0,0,1},
    {1,0,0,0,0, 0,0,0,0,0, 1,0,0,0,0, 0,0,0,0,1},
    {1,0,0,0,0, 0,0,0,0,0, 2,0,0,0,0, 0,0,0,0,1},
    {1,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,1},
    {1,0,0,0,0, 0,0,0,0,0, 1,0,0,0,0, 0,0,0,0,1},
    {1,0,0,0,0, 0,0,0,0,0, 1,0,0,0,0, 0,0,0,0,1},
    {1,0,0,0,0, 0,0,0,0,0, 1,0,0,0,0, 0,0,0,0,1},
    {1,0,0,0,0, 0,0,0,0,0, 1,0,0,0,0, 0,0,0,0,1},
    {1,0,0,0,0, 0,0,0,0,0, 1,0,0,0,0, 0,0,0,0,1},
    {1,0,0,0,0, 0,0,0,0,0, 1,0,0,0,0, 0,0,0,0,1},
    {1,0,0,0,0, 0,0,0,0,0, 1,0,0,0,0, 0,0,0,0,1},
    {1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1},
};

//turned off atm since its crap
void mapgen(uint8_t depth, uint8_t x,uint8_t y,uint8_t w,uint8_t h){
    //needs better rng limits
    uint8_t rx = random(y,h);
    for(uint8_t i = x; i < w; i++){
        dungeon[i][rx] = 1;
    }
    uint8_t ry = random(x,w);
    for(uint8_t i = y; i < h; i++){
        dungeon[ry][i] = 1;
    }

    //doorways
    dungeon[random(x,ry)][rx] = 0;
    dungeon[ry][random(y,rx)] = 0;
    dungeon[random(ry,w)][rx] = 0;
    dungeon[ry][random(rx,h)] = 0;

    if (depth < 3) {
        mapgen(depth+1,x,y,ry,rx);
        mapgen(depth+1,ry,rx,w,h);
        mapgen(depth+1,ry,y,w,rx);
        mapgen(depth+1,x,rx,ry,h);
    }
}

int main () {
game.begin();

//mapgen(0,0,0,20,20);
game.display.loadRGBPalette(paletteCGA);
//game.display.setFont(fontAdventurer); //too big
//game.display.persistence = true;
game.display.setInvisibleColor(0);

int playerX = 2;
int playerY = 2;

while (game.isRunning()) {

    if (game.update()) {

        if (game.buttons.repeat(BTN_UP,4)){
            if (!dungeon[playerY-1][playerX]){
                playerY --;
            }
        }
        if (game.buttons.repeat(BTN_DOWN,4)){
            if (!dungeon[playerY+1][playerX]){
                playerY ++;
            }
        }
        if (game.buttons.repeat(BTN_LEFT,4)){
            if (!dungeon[playerY][playerX-1]){
                playerX --;
            }
        }
        if (game.buttons.repeat(BTN_RIGHT,4)){
            if (!dungeon[playerY][playerX+1]){
                playerX ++;
            }
        }
        
        //map draw
        for(int x =playerX-7; x<playerX+8; x++){ //7
            for(int y =playerY-6; y<playerY+6; y++){
                if(x >= 0 && y >= 0 && x <20 && y < 20){
                    game.display.drawBitmap(14*(x-playerX+7),14*(y-playerY+6),background[dungeon[y][x]]);
                }
            }
        }
        
        //gui
        game.display.setCursor(0,168);
        game.display.color = 1;
        game.display.print("OMG! this font just fits on the screen");
        game.display.drawBitmap(14*(7),14*(6),sprites[3]);
    }

}

return 1;
}
